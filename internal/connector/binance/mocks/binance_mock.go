// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/connector/binance/binance.go

// Package mock_binance is a generated GoMock package.
package mock_binance

import (
	context "context"
	reflect "reflect"

	binance_connector "github.com/binance/binance-connector-go"
	gomock "github.com/golang/mock/gomock"
	binance "github.com/twk/trader-b/internal/connector/binance"
)

// MockAccountClient is a mock of AccountClient interface.
type MockAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountClientMockRecorder
}

// MockAccountClientMockRecorder is the mock recorder for MockAccountClient.
type MockAccountClientMockRecorder struct {
	mock *MockAccountClient
}

// NewMockAccountClient creates a new mock instance.
func NewMockAccountClient(ctrl *gomock.Controller) *MockAccountClient {
	mock := &MockAccountClient{ctrl: ctrl}
	mock.recorder = &MockAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountClient) EXPECT() *MockAccountClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockAccountClient) Do(ctx context.Context, opts ...binance_connector.RequestOption) (*binance_connector.AccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*binance_connector.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockAccountClientMockRecorder) Do(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockAccountClient)(nil).Do), varargs...)
}

// MockExchangeInfoClient is a mock of ExchangeInfoClient interface.
type MockExchangeInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeInfoClientMockRecorder
}

// MockExchangeInfoClientMockRecorder is the mock recorder for MockExchangeInfoClient.
type MockExchangeInfoClientMockRecorder struct {
	mock *MockExchangeInfoClient
}

// NewMockExchangeInfoClient creates a new mock instance.
func NewMockExchangeInfoClient(ctrl *gomock.Controller) *MockExchangeInfoClient {
	mock := &MockExchangeInfoClient{ctrl: ctrl}
	mock.recorder = &MockExchangeInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeInfoClient) EXPECT() *MockExchangeInfoClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockExchangeInfoClient) Do(ctx context.Context, opts ...binance_connector.RequestOption) (*binance_connector.ExchangeInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*binance_connector.ExchangeInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockExchangeInfoClientMockRecorder) Do(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockExchangeInfoClient)(nil).Do), varargs...)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// NewExchangeInfoService mocks base method.
func (m *MockClient) NewExchangeInfoService() binance.ExchangeInfoClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExchangeInfoService")
	ret0, _ := ret[0].(binance.ExchangeInfoClient)
	return ret0
}

// NewExchangeInfoService indicates an expected call of NewExchangeInfoService.
func (mr *MockClientMockRecorder) NewExchangeInfoService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExchangeInfoService", reflect.TypeOf((*MockClient)(nil).NewExchangeInfoService))
}

// NewGetAccountService mocks base method.
func (m *MockClient) NewGetAccountService() binance.AccountClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetAccountService")
	ret0, _ := ret[0].(binance.AccountClient)
	return ret0
}

// NewGetAccountService indicates an expected call of NewGetAccountService.
func (mr *MockClientMockRecorder) NewGetAccountService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetAccountService", reflect.TypeOf((*MockClient)(nil).NewGetAccountService))
}
